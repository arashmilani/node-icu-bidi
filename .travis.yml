# Much of this is borrowed from node-sqlite3.
sudo: false

language: cpp

git:
  depth: 10

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-precise-3.5
    packages:
    - clang-3.5

## don't re-build for tags so that [publish binary] is not re-run
## https://github.com/travis-ci/travis-ci/issues/1532
#branches:
#  except:
#    - /^[0-9]+[.][0-9]+[.][0-9]+/


matrix:
  include:
     # Linux
     - os: linux
       compiler: clang
       env: NODE_VERSION="4.1.0"
       addons:
         apt:
            sources: [ 'ubuntu-toolchain-r-test','llvm-toolchain-precise-3.5', 'gcc-multilib', 'g++-multilib' ]
            packages: [ 'clang-3.5']
     - os: linux
       compiler: clang
       env: NODE_VERSION="4.0.0"
       addons:
         apt:
            sources: [ 'ubuntu-toolchain-r-test','llvm-toolchain-precise-3.5', 'gcc-multilib', 'g++-multilib' ]
            packages: [ 'clang-3.5']
     - os: linux
       compiler: clang
       env: NODE_VERSION="iojs-3.1.0"
       addons:
         apt:
            sources: [ 'ubuntu-toolchain-r-test','llvm-toolchain-precise-3.5', 'gcc-multilib', 'g++-multilib' ]
            packages: [ 'clang-3.5']
     - os: linux
       compiler: clang
       env: NODE_VERSION="iojs-2.4.0"
       addons:
         apt:
            sources: [ 'ubuntu-toolchain-r-test','llvm-toolchain-precise-3.5', 'gcc-multilib', 'g++-multilib' ]
            packages: [ 'clang-3.5']
     - os: linux
       compiler: clang
       env: NODE_VERSION="iojs-1.8.4"
       addons:
         apt:
            sources: [ 'ubuntu-toolchain-r-test','llvm-toolchain-precise-3.5', 'gcc-multilib', 'g++-multilib' ]
            packages: [ 'clang-3.5']
     - os: linux
       env: NODE_VERSION="0.12.7"
     - os: linux
       env: NODE_VERSION="0.10.40"
     - os: linux
       env: NODE_VERSION="0.8.28"
     # test building against external libicu
     - os: linux
       env: NODE_VERSION="0.10.40" EXTERNAL_LIBICU=true PUBLISHABLE=false
       addons:
         apt:
            sources: [ 'libicu-dev:i386' ]
            packages: [ 'libicu-dev']
     # OS X
     - os: osx
       compiler: clang
       env: NODE_VERSION="4.0.0" # node abi 46
     - os: osx
       compiler: clang
       env: NODE_VERSION="iojs-3.1.0" # node abi 46
     - os: osx
       compiler: clang
       env: NODE_VERSION="iojs-2.4.0" # node abi 44
     - os: osx
       compiler: clang
       env: NODE_VERSION="iojs-1.8.4" # node abi 43
     - os: osx
       compiler: clang
       env: NODE_VERSION="0.12.7" # node abi 14
     - os: osx
       compiler: clang
       env: NODE_VERSION="0.10.40" # node abi 11
     - os: osx
       compiler: clang
       env: NODE_VERSION="0.8.28"

env:
  global:
   - secure: "p/3rptxI8KJGhU1omrUu2WRClXhVwbRoWC3YfjaQr6rDMUMkmARc4tWT1UnL6e7bKAG2vKO9ko1d3meT6rHZL8ma/I5z9tvm3gefxLdIeV1I93JNX3nCLNkCDdIOcHEFibr1R8qsrcLqTaVoLMBhnNxFEvUFLbebD3ArFBy0zxY="

#matrix:
#  allow_failures:
#   # v8 API changed in 0.11, needs update
#   - env: NODE_VERSION="0.11"

before_install:
- export PUBLISHABLE=${PUBLISHABLE:-true}
#- if [[ $(uname -s) == 'Linux' -a false ]]; then
#     export CXX="clang++-3.5";
#     export CC="clang-3.5";
#  fi;
# check if tag exists and matches package.json
- scripts/validate_tag.sh
- echo $NODE_VERSION
- rm -rf ~/.nvm/ && git clone --depth 1 https://github.com/creationix/nvm.git ~/.nvm
- source ~/.nvm/nvm.sh
- nvm install $NODE_VERSION
- nvm use $NODE_VERSION
#- npm update -g npm
#- npm config set spin=false
#- npm config set loglevel=http
- node --version
- npm --version

install:
# put node-pre-gyp on path
- export PATH=./node_modules/.bin/:$PATH

before_script:
# get commit message
- export COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')

script:
- node --version
- npm --version
- if test -z "$EXTERNAL_LIBICU" ; then npm install --build-from-source ; else npm install --build-from-source --libicu=external ; fi
- node-pre-gyp package testpackage
- npm test
# Normal case: tagged builds trigger 32-bit and 64-bit x86 builds
- if scripts/validate_tag.sh --check ; then npm install es6-shim && npm install request && npm run gh-publish && scripts/publish_x86.sh ; fi
# Workaround to trigger a manual x86 build
- if test "$TRAVIS_BRANCH" == "x86" -a  "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then npm install es6-shim && npm install request && npm run gh-publish && scripts/publish_x86.sh ; fi
# Trigger a manual macosx build by pushing to macosx branch (see above)
- if test "$TRAVIS_BRANCH" == "macosx" -a  "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then npm install es6-shim && npm install request && npm run gh-publish ; fi
